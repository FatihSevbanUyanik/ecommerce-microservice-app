"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.errorHandler = void 0;
var i18n_1 = require("i18n");
var customError_1 = __importDefault(require("../errors/customError"));
var databaseError_1 = require("../errors/databaseError");
var badRequestError_1 = require("../errors/badRequestError");
var notAuthorizedError_1 = require("../errors/notAuthorizedError");
var handleCastErrorDB = function (err) {
    var message = i18n_1.__('error_invalid', err.path + ": " + err.value);
    return new databaseError_1.DatabaseError([message]);
};
var handleDuplicateFieldsDB = function (err) {
    var value = err.errmsg.match(/(["'])(\\?.)*?\1/)[0];
    var message = i18n_1.__('error_already_in_use', value);
    return new databaseError_1.DatabaseError([message]);
};
var handleValidationErrorDB = function (err) {
    var messages = Object.values(err.errors).map(function (el) { return el.message; });
    return new databaseError_1.DatabaseError(messages);
};
var handleJWTError = function () {
    var message = i18n_1.__('error_invalid_token');
    return new notAuthorizedError_1.NotAuthorizedError(message);
};
var handleJWTExpiredError = function () {
    var message = i18n_1.__('error_expired_token');
    return new notAuthorizedError_1.NotAuthorizedError(message);
};
var handleUnexpectedError = function () {
    var message = i18n_1.__('error_server_error');
    return new badRequestError_1.BadRequestError(message);
};
var errorHandler = function (err, req, res, next) {
    if (err.name === 'CastError') {
        err = handleCastErrorDB(err);
    }
    else if (err.code === 11000) {
        err = handleDuplicateFieldsDB(err);
    }
    else if (err.name === 'ValidationError') {
        err = handleValidationErrorDB(err);
    }
    else if (err.name === 'JsonWebTokenError') {
        err = handleJWTError();
    }
    else if (err.name === 'TokenExpiredError') {
        err = handleJWTExpiredError();
    }
    else if (!(err instanceof customError_1.default)) {
        console.log(err);
        err = handleUnexpectedError();
    }
    return res.status(err.status).send({ status: err.status, errors: err.serializeErrors() });
};
exports.errorHandler = errorHandler;
